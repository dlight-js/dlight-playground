import {CustomNode, View} from "@dlightjs/dlight"
import {button, div, env, h1, Prop, State, th } from "@dlightjs/types"
import { css } from "@dlightjs/emotion"
// @ts-expect-error
import { Playground } from "./playground/Playground.tsd"
import * as monaco from 'monaco-editor'


const themes = {
    light: {
        name: "light",
        font: "black",
        subFont: "#6A6A6A",
        activeFont: "black",
        bg: "white",
        tabsBg: "#F5F0F2",
        activeTabBg: "white", 
        titleBg: "#F5F0F2",
        borderColor: "#DDDDDD",
    },
    dark: {
        name: "dark",
        font: "white",
        subFont: "#969696",
        activeFont: "white",
        bg: "#1E1E1E",
        tabsBg: "#2D2D2D",
        activeTabBg: "#1E1E1E", 
        titleBg: "#2D2D2D",
        borderColor: "#3C3C3C",
    }
}

export class App extends View {
    @State count = 0
    @State el?: HTMLElement
    editor?: any
    derivedCount = this.count + 1
    
    @State theme = themes.dark
    changeTheme = () => {
        if (this.theme === themes.light) {
            this.theme = themes.dark
        } else {
            this.theme = themes.light
        }
    }
    
    Body() {
        env()
            .refreshFunc(this.refreshFunc)
            .theme(this.theme)
            .changeTheme(this.changeTheme)
        {
            Playground()
        }
    }
}